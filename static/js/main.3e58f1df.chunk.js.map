{"version":3,"sources":["componets/Buscador.js","componets/Imagenes.js","componets/Paginacion.js","componets/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","handleRef","React","createRef","handleData","e","preventDefault","props","handleSearch","current","value","onSubmit","this","className","ref","type","placeholder","Component","Imagenes","imagen","largeImageURL","views","previewURL","tags","downloads","likes","src","alt","href","target","Paginacion","onClick","pagAnterior","pagSiguiente","Resultado","mostrarImg","imagenes","length","console","log","Fragment","map","key","id","App","scroll","document","querySelector","scrollIntoView","pagina","state","pag","setState","handleAPI","term","img","termino","url","fetch","then","respuesta","json","hits","search","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e58f1df.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Buscador extends React.Component {\n\n    handleRef = React.createRef();\n\n    handleData = (e) => {\n        e.preventDefault()\n\n        this.props.handleSearch(this.handleRef.current.value)\n    }\n  \n    render() {\n        return (\n            <form onSubmit={this.handleData}>\n                <div className=\"row\">\n                    <div className=\"form-group col-md-8\">\n                        <input ref={this.handleRef} type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Busca una imagen, Ejemplo: Casa\" />\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                        <input type=\"submit\" className=\"btn btn-lg btn-primary btn-block\" value='Buscar' />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default Buscador;\n","import React from 'react'\n\nconst Imagenes =(props) => {\n    \n    const {largeImageURL, views, previewURL, tags, downloads, likes} = props.imagen;\n    \n        return (\n            <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n                <div className=\"card\" >\n                    <img src={previewURL} alt={tags} className=\"card-img-top\" />\n                    <div className=\"card-body\">\n                      <p className=\"card-text\">{likes} Me gusta</p>\n                      <p className=\"card-text\">Visto {views}</p>\n                        <p className=\"card-text\">Descargas {downloads}</p>\n                      \n                      <a href={largeImageURL} target=\"blank\" className=\"btn btn-danger btn-block\">Ver imagen</a>\n                    </div>\n                </div>\n            </div>\n        );\n    \n}\n\nexport default Imagenes;","import React from 'react'\n\nconst Paginacion = props =>{\n return(\n     <div className=\"py-3\">\n         <button onClick={props.pagAnterior} type='button' className=\"btn btn-info mr-1\">Anterior &larr;</button>\n         \n         <button onClick={props.pagSiguiente} type='button' className=\"btn btn-info\">Siguiente &rarr;</button>\n     </div>\n )\n}\n\nexport default Paginacion;","import React from 'react'\nimport Imagenes from './Imagenes';\nimport Paginacion from './Paginacion'\n\nclass Resultado extends React.Component {\n\n    mostrarImg = () =>{\n        const imagenes = this.props.imagen\n\n        if (imagenes.length === 0) return null;\n\n        console.log(imagenes)\n\n        return(\n            <React.Fragment>\n                <div className=\"col-12 p-5 row\">\n                    {imagenes.map(\n                        imagen =>(\n                        <Imagenes \n                            key={imagen.id}\n                            imagen={imagen}/>)\n                    )}\n                </div>\n                \n                <Paginacion \n                pagAnterior={this.props.pagAnterior}\n                \n                pagSiguiente={this.props.pagSiguiente}/>\n            </React.Fragment>\n        )\n    }\n    \n    render() {\n        return(\n            <React.Fragment>\n                {this.mostrarImg()}\n            </React.Fragment>\n\n\n        )\n    }\n}\n\nexport default Resultado;","import React from 'react';\nimport Buscador from './componets/Buscador';\nimport Resultado from './componets/Resultado';\n\n\nclass App extends React.Component{\n\nscroll =()=>{\n  const element = document.querySelector('.jumbotron')\n  element.scrollIntoView('smooth', 'start')\n}\n\npagAnterior = () =>{\n  // leer state\n  let pagina = this.state.pag;\n  //si estamos en la pagina 1 no ir atras\n  if(pagina === 0) return null\n  //sumar 1 a la pagina actual \n  pagina -= 1\n  //agregar cambio al state\n  this.setState({\n    pag: pagina,\n  }, ()=>{this.handleAPI();\n           this.scroll()\n          })\n}\n\npagSiguiente = () =>{\n  // leer state\n  let pagina = this.state.pag;\n  //sumar 1 a la pagina actual \n  pagina++\n  //agregar cambio al state\n  this.setState({\n    pag: pagina,\n  }, ()=>{this.handleAPI()\n          this.scroll()\n  })\n\n}\n\n\nstate = {\n  term: '',\n  img: [],\n  pag: '',\n}\n\nhandleAPI = () =>{\n  const termino = this.state.term\n  const pagina = this.state.pag\n  const url = `https://pixabay.com/api/?key=14298416-fc9e44de12a432586f485eb1d&q=${termino}&per_page=30&page=${pagina}`\n\n  fetch(url)\n  .then(respuesta => respuesta.json())\n  .then(respuesta => this.setState({img: respuesta.hits}))\n}\n\nsearch = (term) => {\n  this.setState({\n    term : term,\n    pag : 1,\n  }, () => {\n    this.handleAPI()\n  })\n}\n\nrender(){\n  return (\n    <div className=\"app container text-center\">\n     <div className='jumbotron'>\n       <p className=\"lead text-center\">Find images</p>\n       <Buscador handleSearch={this.search} />\n     </div>\n\n     <Resultado \n     imagen={this.state.img}\n     pagAnterior={this.pagAnterior}\n     \n     pagSiguiente={this.pagSiguiente} />\n\n    </div>\n  );\n}\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}